#include "Particle.h"

#include <iostream>
#include "utils/ArrayUtils.h"
#include "spdlog/spdlog.h"

Particle::Particle() : type{0}, f{std::array<double, 3>{}}, old_f(std::array<double, 3>{}), valid{true} {
    spdlog::info("Particle generated with default constructor!");
}


Particle::Particle(int type_arg) : type{type_arg}, f{std::array<double, 3>{}}, old_f(std::array<double, 3>{}), valid{true} {
    spdlog::info("Particle generated with type!");
}

Particle::Particle(std::array<double, 3> x_arg, std::array<double, 3> v_arg,
                   double m_arg, int type_arg) : type{type_arg}, f{std::array<double, 3>{}},
                                                 old_f{std::array<double, 3>{}},
                                                 x{x_arg}, v{v_arg}, m{m_arg}, valid{true} {
    spdlog::info("Particle generated!");
}

Particle::Particle(const Particle &other) : type{other.type}, f{other.f}, old_f{other.old_f}, x{other.x}, v{other.v},
                                            m{other.m}, valid{other.valid} {
    spdlog::info("Particle generated by copy");
}

Particle &Particle::operator=(const Particle &other) {
    if ((*this).operator==(const_cast<Particle &>(other)))
        return (*this);
    x = other.x;
    v = other.v;
    f = other.f;
    old_f = other.old_f;
    m = other.m;
    type = other.type;
    valid = other.valid;
    return (*this);
}

Particle::Particle(Particle &&other) noexcept: type{other.type}, f{other.f}, old_f{other.old_f}, x{other.x}, v{other.v},
                                               m{other.m}, valid{true} {
    other.type = 0;
    other.f = {};
    other.old_f = {};
    other.x = {};
    other.v = {};
    other.m = 0;
    other.valid = false;
    spdlog::info("Particle generated by moving!");
}

Particle &Particle::operator=(Particle &&other) noexcept {
    if ((*this).operator==(const_cast<Particle &>(other)))
        return (*this);
    x = other.x;
    v = other.v;
    f = other.f;
    old_f = other.old_f;
    m = other.m;
    type = other.type;
    valid = other.valid;
    other.type = 0;
    other.f = {};
    other.old_f = {};
    other.x = {};
    other.v = {};
    other.m = 0;
    other.valid = false;
    return (*this);
}

Particle::~Particle() {
    spdlog::info("Particle destructed!");
}

const std::array<double, 3> &Particle::getX() const { return x; }

const std::array<double, 3> &Particle::getV() const { return v; }

const std::array<double, 3> &Particle::getF() const { return f; }

const std::array<double, 3> &Particle::getOldF() const { return old_f; }

double Particle::getM() const { return m; }

int Particle::getType() const { return type; }

void Particle::setX(int d, double val) {
    x[d] = val;
}

void Particle::setX(std::array<double, 3> pos) {
    x = pos;
}

void Particle::setV(int d, double val) {
    v[d] = val;
}

void Particle::setV(std::array<double, 3> vel) {
    v = vel;
}

void Particle::setF(int d, double val) {
    f[d] = val;
}

void Particle::setF(std::array<double, 3> force) {
    f = force;
}

void Particle::setOldF(const std::array<double, 3> &val) {
    old_f = val;
}

void Particle::setM(double val) {
    m = val;
}

void Particle::setType(int val) {
    type = val;
}

std::string Particle::toString() const {
    std::stringstream stream;
    stream << "Particle: X:" << x << " v: " << v << " f: " << f << " m: " << m
           << " old_f: " << old_f << " type: " << type;
    return stream.str();
}

bool Particle::operator==(Particle &other) {
    return (x == other.x) and (v == other.v) and (f == other.f) and
           (type == other.type) and (m == other.m) and (old_f == other.old_f);
}

bool Particle::operator!=(Particle &other) {
    return !((*this) == other);
}


std::ostream &operator<<(std::ostream &stream, Particle &p) {
    stream << p.toString();
    return stream;
}
