<?xml version="1.0"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xS="http://www.w3.org/2001/XMLSchema">
    <!-- enum type for choosing parallelization strategy allowed -->
    <xs:simpleType name="parallel_t">
        <xs:restriction base = "xs:string">
            <xs:enumeration value="primitive_fit" />
            <xs:enumeration value="primitive" />
            <xs:enumeration value="none" />
        </xs:restriction>
    </xs:simpleType>

    <!-- enum type for choosing geometric type for generator, values cuboid and sphere allowed -->
    <xs:simpleType name ="geometric_t">
        <xs:restriction base="xs:string">
            <xs:enumeration value ="cuboid"/>
            <xs:enumeration value ="sphere"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- enum type for choosing border type, values cyclic, reflective and outflow allowed -->
    <xs:simpleType name="border_single_t">
        <xs:restriction base="xs:string">
            <xs:enumeration value ="periodic"/>
            <xs:enumeration value ="reflective"/>
            <xs:enumeration value ="outflow"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- all boundary condition info, one border type for each side (front and back can be left out for 2D -->
    <xs:complexType name ="border_t">
        <xs:sequence>
            <xs:element name="left" type="border_single_t" />
            <xs:element name="right" type="border_single_t" />
            <xs:element name="upper" type="border_single_t" />
            <xs:element name="lower" type="border_single_t" />
            <xs:element name="front" type="border_single_t" minOccurs="0" />
            <xs:element name="back" type="border_single_t" minOccurs="0" />
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="behaviour_t">
        <xs:restriction base="xs:string">
            <xs:enumeration value="normal"/>
            <xs:enumeration value="membrane"/>
            <xs:enumeration value="immovable"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- info for the particle generator, n1,n2,n3 and radius optional, rest mandatory -->
    <xs:complexType name ="generator_info_t">
        <xs:sequence>
            <xs:element name="x" type="xs:decimal" />
            <xs:element name="y" type="xs:decimal" />
            <xs:element name="z" type="xs:decimal" />
            <xs:element name="v1" type="xs:decimal" />
            <xs:element name="v2" type="xs:decimal" />
            <xs:element name="v3" type="xs:decimal" />
            <xs:element name="mass" type="xs:decimal" />
            <xs:element name="epsilon" type="xs:decimal" />
            <xs:element name="sigma" type="xs:decimal" />
            <xs:element name="distance" type="xs:decimal" />
            <xs:element name="brownianFactor" type="xs:decimal" />
            <!-- used for brownian motion and generation -->
            <xs:element name="dim" type="xs:int" />
            <xs:element minOccurs="0" name="n1" type="xs:int" />
            <xs:element minOccurs="0" name="n2" type="xs:int" />
            <xs:element minOccurs="0" name="n3" type="xs:int" />
            <xs:element minOccurs="0" name="radius" type="xs:int" />
            <xs:element minOccurs="0" maxOccurs="unbounded" name="special_particle" type="special_particle_t" />
            <xs:element minOccurs="0" name="baseForce" type="array_float_3" />
        </xs:sequence>
        <xs:attribute name="type" type="geometric_t" use="required"/>
        <xs:attribute name="behaviour" type="behaviour_t" use="optional"/>
    </xs:complexType>

    <!-- enum type for choosing container type, values linkedcell and directsum allowed -->
    <xs:simpleType name ="containertype_t">
        <xs:restriction base="xs:string">
            <xs:enumeration value ="linkedcell"/>
            <xs:enumeration value ="directsum"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- enum type for choosing calculation type, values lennardjones and gravitation allowed -->
    <xs:simpleType name="calculatortype_t">
        <xs:restriction base="xs:string">
            <xs:enumeration value ="lennardjones"/>
            <xs:enumeration value ="smoothed-lennardjones"/>
            <xs:enumeration value ="gravitation"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- info for the LinkedCellContainer, a few numbers and an object containing all boundary condition info -->
    <xs:complexType name="containerinfo_t">
        <xs:sequence minOccurs = "0">
            <xs:element name="rCut" type="xs:decimal"/>
            <xs:element name="domainSizeX" type="xs:decimal"  />
            <xs:element name="domainSizeY" type="xs:decimal"  />
            <xs:element name="domainSizeZ" type="xs:decimal" />
            <xs:element name="borderType" type="border_t" />
        </xs:sequence>
        <xs:attribute name="type" type="containertype_t" use="required" />
    </xs:complexType>

    <!-- some info for the LJ calculator -->
    <xs:complexType name="calculationInfo_t">
        <xs:sequence minOccurs = "0">
            <xs:element name="epsilon" type="xs:decimal" />
            <xs:element name="sigma" type="xs:decimal" />
            <xs:element name="gravityFactor" type="array_float_3" minOccurs="0"/>
            <xs:element name="brownianMotion" type="xs:decimal" />
            <xs:element name="baseForceTime" type="xs:decimal" minOccurs="0" />
            <xs:element name="rZero" type="xs:decimal" minOccurs="0" />
            <xs:element name="stiffnessConstant" type="xs:decimal" minOccurs="0" />
            <xs:element name="rl" type="xs:decimal" minOccurs="0" />
        </xs:sequence>
        <xs:attribute name="type" type = "calculatortype_t" use = "required" />
    </xs:complexType>

    <!-- enum type for choosing output writer, values vtk and xyz allowed -->
    <xs:simpleType name="outputwriter_t">
        <xs:restriction base="xs:string">
            <xs:enumeration value ="vtk"/>
            <xs:enumeration value ="xyz"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="thermostat_info_t">
        <xs:sequence>
            <xs:element name="nThermostat" type="xs:int" />
            <xs:element name="Tinit" type="xs:decimal" />
            <xs:element name="Ttarget" type="xs:decimal" minOccurs="0"/>
            <xs:element name="deltaTemp" type="xs:decimal" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="excludeY" type="xs:boolean" use="optional" />
    </xs:complexType>

    <xs:simpleType name="statistics_type_t">
        <xs:restriction base="xs:string">
            <xs:enumeration value="thermodynamical" />
            <xs:enumeration value="densityVelocity" />
        </xs:restriction>
    </xs:simpleType>


    <xs:complexType name="statistics_t">
        <xs:sequence>
            <xs:element minOccurs="0" name="noBins" type="xs:int" />
            <xs:element minOccurs="0" name="deltaR" type="xs:decimal" />
            <xs:element name="file" type="xs:string" />
            <xs:element name="frequency" type="xs:int" />
        </xs:sequence>
        <xs:attribute name="type" type="statistics_type_t" use="required" />
    </xs:complexType>


    <xs:complexType name="array_int_3">
        <xs:attribute name="x" type="xs:int" use="required" />
        <xs:attribute name="y" type="xs:int" use="required" />
        <xs:attribute name="z" type="xs:int" use="required" />
    </xs:complexType>

    <xs:complexType name="array_float_3">
        <xs:attribute name="x" type="xs:decimal" use="required" />
        <xs:attribute name="y" type="xs:decimal" use="required" />
        <xs:attribute name="z" type="xs:decimal" use="required" />
    </xs:complexType>

    <xs:complexType name="special_particle_t">
        <xs:sequence>
            <xs:element name="position" type="array_int_3" />
            <xs:element minOccurs="0" name="force" type="array_float_3" />
            <xs:element minOccurs="0" name="vel" type="array_float_3" />
            <xs:element minOccurs="0" name="mass" type="xs:decimal" />
        </xs:sequence>
        <xs:attribute name="immovable" type="xs:boolean" use="optional"/>
        <xs:attribute name="membrane" type="xs:boolean" use="optional"/>
    </xs:complexType>

    <!-- everything the simulation needs -->
    <xs:complexType name="simulation_t">
        <xs:sequence>
            <!-- optional additional info for container, only used for linkedcell -->
            <xs:element name="container" type="containerinfo_t"/>
            <!-- optional additional info for calculator, only used for lennardjones -->
            <xs:element name="calculator" type="calculationInfo_t" />
            <xs:element minOccurs = "0" maxOccurs="unbounded" name="inputFile" type="xs:string" />
            <xs:element minOccurs = "0" maxOccurs="unbounded" name="generatorFile" type="xs:string" />
            <xs:element name="outputFile" type="xs:string" />
            <xs:element minOccurs = "0" maxOccurs="unbounded" name="generatorInfo" type="generator_info_t"/>
            <xs:element minOccurs = "0" name = "thermostat" type="thermostat_info_t" />
            <xs:element minOccurs = "0" name = "checkpointInput" type="xs:string" />
            <xs:element minOccurs = "0" name = "checkpointOutput" type="xs:string" />
            <xs:element minOccurs = "0" name = "statistics" type="statistics_t" />
        </xs:sequence>
        <xs:attribute name="t_end" type="xs:decimal" use="required"/>
        <xs:attribute name="delta_t" type="xs:decimal" use="required"/>
        <xs:attribute name="writeFrequency" type="xs:int" use="required"/>

        <xs:attribute name="outputWriter" type = "outputwriter_t" use = "required" />
        <xs:attribute name="parallelization" type="parallel_t" use ="optional" />
        <xs:attribute name="random" type="xs:boolean" use="optional" />
    </xs:complexType>

    <!-- one main simulation element in top level -->
    <xs:element name="simulation" type="simulation_t"/>

</xs:schema>